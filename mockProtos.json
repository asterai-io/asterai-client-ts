{
  "protos": [
      {
          "name": "Pipedrive",
          "proto": "service Pipedrive {\n// Gets all pipelines sorted by id\nrpc getPipelines(GetPipelinesInput) returns (GenericOutput);\n// Gets all stages for all pipelines\nrpc getStages(EmptyInput) returns (GenericOutput);\n// Gets all deals, useful for locating the id of a deal if an user asks for\n// an action to be performed pertaining to a deal by name, i.e: \"move Mr.\n// Hank into the next stage\"\nrpc getDeals(EmptyInput) returns (GenericOutput);\n// Adds a deal\nrpc addDeal(AddDealInput) returns (GenericOutput);\n// Updates a deal\nrpc updateDeal(UpdateDealInput) returns (GenericOutput);\n// Gets details about an activity\nrpc getActivity(GetActivityInput) returns (GenericOutput);\n// Gets all activities\nrpc getActivities(EmptyInput) returns (GenericOutput);\n// Add an activity\nrpc addActivity(AddActivityInput) returns (GenericOutput);\n// Gets all leads\nrpc getLeads(EmptyInput) returns (GenericOutput);\n// Adds a lead\nrpc addLead(AddLeadInput) returns (GenericOutput);\n// Gets all organizations\nrpc getOrganizations(EmptyInput) returns (GenericOutput);\n// Creates an organization\nrpc createOrganization(CreateOrganizationInput) returns (GenericOutput);\n}\n\nmessage GetPipelinesInput {\n// String literal of \"asc\" or \"desc\"\nstring sort = 1;\n}\nmessage GenericOutput {\nstring system_message = 1;\n}\n\nmessage EmptyInput {}\n\nmessage AddDealInput {\n// The title of the deal, could be the name of the contact, company, or a\n// description\nstring title = 1;\n// The value of the deal, could be the price or monthly recurring revenue\noptional string value = 2;\n// The currency of the deal, if none is given default it to USD\noptional string currency = 3;\n// The organization id of the deal, if not given try to use getOrganizations\n// to get the id\noptional string organization_id = 4;\n// Status of the deal, a good compliment for the current stage\noptional string status = 5;\n}\n\nmessage UpdateDealInput {\n// The id of the deal to update, if it was not specified, call getDeals to\n// get the deal id, there is no need to ask the user, just make the call.\nint64 deal_id = 1;\n// The stage id of the deal, if it was not specified, call getStages to get\n// the stage id, there is no need to ask the user, just make the call.\nstring stage_id = 2;\n// The status of the deal, same as in AddDealInput, but optional\n// do not set this value to a blank string.\noptional string status = 3;\n// The title of the deal, same as in AddDealInput, but optional\n// do not set this value to a blank string.\noptional string title = 4;\n// The value of the deal, same as in AddDealInput, but optional\n// do not set this value to a blank string.\noptional string value = 5;\n// The currency of the deal, same as in AddDealInput, but optional\n// do not set this value to a blank string.\noptional string currency = 6;\n// The organization id of the deal, same as in AddDealInput, but optional\n// do not set this value to a blank string.\noptional string organization_id = 7;\n}\n\nmessage GetActivityInput {\n// The id of the activity to get, if it was not specified, call getActivities\n// to get the activity id, there is no need to ask the user, just make the call.\nstring id = 1;\n}\n\nmessage AddActivityInput {\n// The id of the deal to add the activity to, if it was not specified, call\n// getDeals to get the id, there is no need to ask the user, just make the call.\nint64 deal_id = 1;\n// Organization id, if not given try to use getOrganizations to get the\n// organization id, there is no need to ask the user, just make the call.\noptional string organization_id = 2;\n// The id of the lead to add the activity to, if it was not specified, call\n// getLeads to get the lead id, there is no need to ask the user, just make the\n// call.\noptional string lead_id = 3;\n// Due date of the activity in YYYY-MM-DD format, optional\n// do not set this value to a blank string. If the user specifies a date,\n// such as \"3 hours from now\", use WolframAlpha (if available) to get the\n// equivalent date in UTC.\noptional string due_date = 4;\n// Due time of the activity in HH:MM format, optional\n// do not set this value to a blank string. If the user specifies a time,\n// such as \"3 hours from now\", use WolframAlpha (if available) to get the\n// equivalent time in UTC.\noptional string due_time = 5;\n// Duration of the activity in HH:MM format, optional\n// do not set this value to a blank string. If the user specifies a duration,\n// such as \"3 hours\", use WolframAlpha (if available) to get the\n// equivalent duration in HH:MM format.\noptional string duration = 6;\n}\n\nmessage AddLeadInput {\n// The title of the lead\nstring title = 1;\n// Organization id, if not given try to use getOrganizations to get the\n// organization id, there is no need to ask the user, just make the call.\nstring organization_id = 2;\n}\n\nmessage CreateOrganizationInput {\n// The name of the organization\nstring name = 1;\n}"
      },
      {
          "name": "BraveSearch",
          "proto": "service BraveSearch {\n// Search the web for the given query\nrpc webSearch(WebSearchRequest) returns (WebSearchResponse);\n}\n\nmessage WebSearchRequest {\n// The query to search for, i.e \"Superbowl 1999 MVP\"\nstring query = 1;\n}\n\nmessage WebSearchResponse {\nstring system_message = 1;\n}"
      },
      {
          "name": "T3rminal",
          "proto": "service T3rminal {\nrpc trade(TradeInput) returns (TradeInput);\n}\n\nmessage TradeInput {\n// The symbol of the desired token, eg \"ETH\", \"BTC\", \"UNI\"\nstring pair = 1;\n// The amount of the desired token, \"1\", \"0.2\", \"1000\"\nstring amount = 2;\n// The direction of trade, valid values are \"buy\" or \"sell\"\nstring direction = 3;\n// The exchange to use, valid values are \"hyperliquid\", \"handle\",\n// \"vertex\"\nstring exchange = 4;\n}"
      },
      {
          "name": "EnvStorage",
          "proto": "service EnvStorage {\n// Retrieve a value from the plugin environment storage.\n// Use if a user requests to retrieve a value that was previously stored.\nrpc retrieve(EnvStorageInput) returns (EnvStorageOutput);\n}\n\nmessage EnvStorageInput {\nstring key = 1;\n}\n\nmessage EnvStorageOutput {\nstring system_message = 1;\n}"
      },
      {
          "name": "StockInfo",
          "proto": "service StockInfo {\n//gets stock information for a given stock symbol, such as price, last earnings date, earnings per share, dividends, etc.\nrpc getStockInfo(GetStockInfoRequest) returns (GetStockInfoResponse);\n}\n\nmessage GetStockInfoRequest {\n//the stock symbol to get information for\nstring symbol = 1;\n}\n\nmessage GetStockInfoResponse {\nstring system_message = 1;\n}"
      },
      {
          "name": "Wolfram",
          "proto": "service Wolfram {\n//provides simple textual answers for any valid WolframAlpha query in natural language. is able to also provide the market price for commodity metals such as gold,\n//silver and palladium. this method can only provide the answer for one question or one price at a time.\nrpc textQuery(TextQueryRequest) returns (TextQueryResponse) {}\n}\n\nmessage TextQueryRequest {\n//the url-encoded query to send to WolframAlpha\nstring query = 1;\n}\n\nmessage TextQueryResponse {\nstring system_message = 1;\n}"
      }
  ]
}